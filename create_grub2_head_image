#!/bin/bash
#
# \brief   Create hard-disk image bootable via GRUB2
# \author  Christian Helmuth
# \author  Alexander Boettcher
# \date    2014-07-11
#
# We generate a head-image file only containing a BIOS legacy bootable
# image with GPT partition. The head-image contains a bios_grub partition
# (required by GRUB2), a FAT partition to store the additional GRUB2 boot
# modules (*.mod) and the initial configuration (grub.cfg). The configuration
# points to the 3. partition to load from the Genode scenario.
# The 3. partition is supposed to be resized by the Genode tool/run tools to
# fit the size requirements of the Genode scenario subject to boot.
#
# The script requires a PC GRUB2 Bios legacy installation, which may be created
# by "create_grub2_bootloader" script.
#
# Some parts of this script must be executed with superuser privileges and
# utilize 'sudo' for this purpose.

set -e
#set -x

# hints in case you haven't enough /dev/loops
#
# modprobe loop max_loop=64
# mknod -m 660 /dev/loop24 b 7 24
# mknod -m 660 /dev/loop25 b 7 25
# mknod -m 660 /dev/loop26 b 7 26

#
# config
#

GRUB2_DIR=/tmp/tmp.genode_grub2/32_pc.git/binary
GRUB2_INSTALL=$GRUB2_DIR/sbin/grub-install

if [ ! -d $GRUB2_DIR ]; then
	echo "GRUB2 installation '$GRUB2_DIR' missing. Exiting..."
	exit 1
fi

# loop dev for image, partition 2 and 3 of image
loop_image=/dev/loop24
loop_part2=/dev/loop25
loop_part3=/dev/loop26

head_size_kib=1848
head_img="grub2-head.img"

# generate image file
if [ -f $head_img ]; then
	echo "$head_img exists. Exiting..."
	exit 1
fi
fallocate -l ${head_size_kib}kiB $head_img

# prepare label and partition table
parted="parted -a none -s $head_img -- "

let "bios_boot_fs = 40  *     512 / 512" # fs == firstsector
let "bios_boot_ls = $bios_boot_fs + 83"  # ls == lastsector
let "grub2_fs     = $bios_boot_ls + 1"
let "grub2_ls     = 1796 * 1024 / 512 - $bios_boot_fs - 1"
let "genode_fs    = $grub2_ls + 1"
let "genode_ls    = $head_size_kib * 1024 / 512 - $bios_boot_fs - 1"

$parted "mklabel gpt"
$parted "mkpart BIOSBOOT fat32 ${bios_boot_fs}s ${bios_boot_ls}s  set 1 bios_grub on"
$parted "mkpart GRUB2    fat32 ${grub2_fs}s     ${grub2_ls}s      set 2 boot on"
$parted "mkpart GENODE*  fat32 ${genode_fs}s    ${genode_ls}s"

#
# mount loop images
#
let "grub2_offset  = $grub2_fs * 512"
let "grub2_size    = ($grub2_ls - $grub2_fs) * 512"
let "genode_offset = $genode_fs * 512"
let "genode_size   = ($genode_ls - $genode_fs) * 512"

sudo losetup $loop_image $head_img
sudo losetup $loop_part2 $head_img -o $grub2_offset  --sizelimit $grub2_size
sudo losetup $loop_part3 $head_img -o $genode_offset --sizelimit $genode_size

# initialize partitions
sudo mkfs.vfat $loop_part2 -n GRUB2
sudo mkfs.vfat $loop_part3 -n GENODE*

# install GRUB2
mnt_grub2=$(mktemp -d)
mnt_genode=$(mktemp -d)

sudo mount $loop_part2 $mnt_grub2
sudo mount $loop_part3 $mnt_genode

sudo $GRUB2_INSTALL --root-directory=$mnt_grub2 --no-floppy \
                    --target i386-pc \
                    --install-modules="configfile multiboot multiboot2 gzio ext2 gfxterm_background png regexp" \
                    --modules="biosdisk part_gpt vbe" $loop_image
sudo rm $mnt_grub2/boot/grub/grubenv
sudo rm $mnt_grub2/boot/grub/i386-pc/*.img
sudo rm $mnt_grub2/boot/grub/i386-pc/*.sh
sudo rm $mnt_grub2/boot/grub/i386-pc/*.o
sudo rm $mnt_grub2/boot/grub/i386-pc/*.cfg
sudo rmdir $mnt_grub2/boot/grub/fonts
sudo rmdir $mnt_grub2/boot/grub/locale

# generate GRUB2 configuration
cfg=$(mktemp)

cat > $cfg <<EOF
regexp --set 1:disc "([a-z]+[0-9]+)" "\$root"
set root=(\$disc,3)

set gfxpayload="0x0x32"

#set menu_color_normal=black/black
#set color_normal=black/black

insmod gfxterm
terminal_output gfxterm
insmod gfxterm_background
insmod png
#loadfont /boot/grub/fonts/unicode.pf2
background_image -m center /boot/boot.png

configfile /boot/grub/grub.cfg
EOF

sudo cp $cfg $mnt_grub2/boot/grub/grub.cfg
sudo mkdir -p $mnt_grub2/efi/boot
sudo cp grub2/grub2_32.efi $mnt_grub2/efi/boot/bootia32.efi
sudo cp grub2/grub2_64.efi $mnt_grub2/efi/boot/bootx64.efi

cat > $cfg <<EOF

menuentry 'Genode on ???' {
 multiboot2 /boot/bender
}
EOF

sudo mkdir -p $mnt_genode/boot/grub
sudo cp $cfg $mnt_genode/boot/grub/grub.cfg

#sudo cp $GENODE_DIR/repos/gems/src/app/backdrop/genode_logo.png $mnt_genode/boot/boot.png
#sudo mkdir -p $mnt_genode/boot/grub/fonts/
# by installing libfreetype6-dev? or unifont? it will be generated
#sudo cp /boot/grub/fonts/unicode.pf2 $mnt_genode/boot/grub/fonts/.

# show numbers about allocated/free space
df -h $loop_part2 $loop_part3

# cleanup
rm $cfg
sudo umount $mnt_grub2
sudo umount $mnt_genode
rm -r $mnt_grub2
rm -r $mnt_genode
sudo losetup -d $loop_part3
sudo losetup -d $loop_part2
sudo losetup -d $loop_image
